openapi: 3.0.0
info:
    title: 'Example API'
    version: 3.0.0
paths:
    '/api/me/:id': {get: {operationId: meQuery, parameters: [], requestBody: null, responses: {'200': {content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}}}}
    '/api/user/:id': {get: {operationId: userQuery, parameters: [{in: path, name: id, required: true, schema: {$ref: '#/components/schemas/ID'}}], requestBody: null, responses: {'200': {content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}}}}
    /api/users: {get: {operationId: usersQuery, parameters: [], requestBody: null, responses: {'200': {content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/User'}}}}}}}}
    /api/users-limit: {get: {operationId: usersLimitQuery, parameters: [{in: query, name: limit, required: true, schema: {type: integer, format: int32}}], requestBody: null, responses: {'200': {content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/User'}}}}}}}}
    /api/users-sort: {get: {operationId: usersSortQuery, parameters: [{in: query, name: sort, required: true, schema: {type: boolean}}], requestBody: null, responses: {'200': {content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/User'}}}}}}}}
    '/api/book/:id': {get: {operationId: bookQuery, parameters: [{in: path, name: id, required: true, schema: {$ref: '#/components/schemas/ID'}}], requestBody: null, responses: {'200': {content: {application/json: {schema: {$ref: '#/components/schemas/Book'}}}}}}}
    /api/books: {get: {operationId: booksQuery, parameters: [], requestBody: null, responses: {'200': {content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/Book'}}}}}}}}
    /api/never: {get: {operationId: neverQuery, parameters: [], requestBody: null, responses: {'200': {content: {application/json: {schema: {type: string}}}}}}}
    /api/feed: {get: {operationId: feedQuery, parameters: [{in: query, name: feedCommentsFilter, required: true, schema: {type: string}}], requestBody: null, responses: {'200': {content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/Post'}}}}}}}}
    /api/add-book: {post: {operationId: addBookMutation, parameters: [], requestBody: {content: {application/json: {schema: {type: object, required: [title], properties: {title: {type: string}}}}}}, responses: {'200': {content: {application/json: {schema: {$ref: '#/components/schemas/Book'}}}}}}}
components:
    schemas: {Query: {type: object, required: [], properties: {me: {$ref: '#/components/schemas/User'}, user: {$ref: '#/components/schemas/User'}, users: {type: array, items: {$ref: '#/components/schemas/User'}}, usersLimit: {type: array, items: {$ref: '#/components/schemas/User'}}, usersSort: {type: array, items: {$ref: '#/components/schemas/User'}}, book: {$ref: '#/components/schemas/Book'}, books: {type: array, items: {$ref: '#/components/schemas/Book'}}, never: {type: string}, feed: {type: array, items: {$ref: '#/components/schemas/Post'}}}}, User: {type: object, required: [id, name, favoritePizza, favoriteBook, favoriteFood, shelf], properties: {id: {type: object}, name: {type: string}, favoritePizza: {$ref: '#/components/schemas/Pizza'}, favoriteBook: {$ref: '#/components/schemas/Book'}, favoriteFood: {type: object}, shelf: {type: array, items: {$ref: '#/components/schemas/Book'}}}}, Pizza: {type: object, required: [dough], properties: {dough: {type: string}, toppings: {type: array, items: {type: string}}}}, Book: {type: object, required: [id, title], properties: {id: {type: object}, title: {type: string}}}, Salad: {type: object, required: [ingredients], properties: {ingredients: {type: array, items: {type: string}}}}, Post: {type: object, required: [], properties: {comments: {type: array, items: {type: string}}}}, Mutation: {type: object, required: [], properties: {addBook: {$ref: '#/components/schemas/Book'}}}, Subscription: {type: object, required: [], properties: {onBook: {$ref: '#/components/schemas/Book'}}}}
