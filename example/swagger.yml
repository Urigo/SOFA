openapi: 3.0.0
info:
  title: 'Example API'
  version: 3.0.0
paths:
  /me:
    {
      get:
        {
          operationId: meQuery,
          parameters: [],
          requestBody: null,
          responses:
            {
              '200':
                {
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/User' } },
                    },
                },
            },
        },
    }
  /user:
    {
      get:
        {
          operationId: userQuery,
          parameters:
            [
              {
                in: query,
                name: id,
                required: true,
                schema: { $ref: '#/components/schemas/ID' },
              },
            ],
          requestBody: null,
          responses:
            {
              '200':
                {
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/User' } },
                    },
                },
            },
        },
    }
  /users:
    {
      get:
        {
          operationId: usersQuery,
          parameters: [],
          requestBody: null,
          responses:
            {
              '200':
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              type: array,
                              items: { $ref: '#/components/schemas/User' },
                            },
                        },
                    },
                },
            },
        },
    }
  /never:
    {
      get:
        {
          operationId: neverQuery,
          parameters: [],
          requestBody: null,
          responses:
            {
              '200':
                { content: { application/json: { schema: { type: string } } } },
            },
        },
    }
  /feed:
    {
      get:
        {
          operationId: feedQuery,
          parameters:
            [
              {
                in: query,
                name: feedCommentsFilter,
                required: true,
                schema: { type: string },
              },
            ],
          requestBody: null,
          responses:
            {
              '200':
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              type: array,
                              items: { $ref: '#/components/schemas/Post' },
                            },
                        },
                    },
                },
            },
        },
    }
  /get-rest-model-by-id:
    {
      get:
        {
          operationId: getRestModelByIdQuery,
          parameters:
            [
              {
                in: query,
                name: typename,
                required: true,
                schema: { type: string },
              },
              {
                in: query,
                name: id,
                required: true,
                schema: { $ref: '#/components/schemas/ID' },
              },
            ],
          requestBody: null,
          responses:
            {
              '200':
                { content: { application/json: { schema: { type: object } } } },
            },
        },
    }
  '/model/user/:id':
    {
      get:
        {
          operationId: userType,
          parameters:
            [
              {
                in: query,
                name: id,
                required: true,
                schema: { $ref: '#/components/schemas/ID' },
              },
            ],
          requestBody: null,
          responses:
            {
              '200':
                {
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/User' } },
                    },
                },
            },
        },
    }
  '/book/:id':
    {
      get:
        {
          operationId: bookType,
          parameters:
            [
              {
                in: query,
                name: id,
                required: true,
                schema: { $ref: '#/components/schemas/ID' },
              },
            ],
          requestBody: null,
          responses:
            {
              '200':
                {
                  content:
                    {
                      application/json:
                        { schema: { $ref: '#/components/schemas/Book' } },
                    },
                },
            },
        },
    }
components:
  schemas:
    {
      Query:
        {
          type: object,
          required: [],
          properties:
            {
              me: { $ref: '#/components/schemas/User' },
              user: { $ref: '#/components/schemas/User' },
              users:
                { type: array, items: { $ref: '#/components/schemas/User' } },
              never: { type: string },
              feed:
                { type: array, items: { $ref: '#/components/schemas/Post' } },
              _getRESTModelById: { type: object },
            },
        },
      User:
        {
          type: object,
          required:
            [id, name, favoritePizza, favoriteBook, favoriteFood, shelf],
          properties:
            {
              id: { type: object },
              name: { type: string },
              favoritePizza: { $ref: '#/components/schemas/Pizza' },
              favoriteBook: { $ref: '#/components/schemas/Book' },
              favoriteFood: { type: object },
              shelf:
                { type: array, items: { $ref: '#/components/schemas/Book' } },
            },
        },
      Pizza:
        {
          type: object,
          required: [dough],
          properties:
            {
              dough: { type: string },
              toppings: { type: array, items: { type: string } },
            },
        },
      Book:
        {
          type: object,
          required: [id, title],
          properties: { id: { type: object }, title: { type: string } },
        },
      Salad:
        {
          type: object,
          required: [ingredients],
          properties: { ingredients: { type: array, items: { type: string } } },
        },
      Post:
        {
          type: object,
          required: [comments],
          properties: { comments: { type: array, items: { type: string } } },
        },
    }
