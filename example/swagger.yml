openapi: 3.0.0
info:
  title: Example API
  version: 3.0.0
paths:
  /me:
    get:
      operationId: meQuery
      parameters: []
      responses:
        '200':
          description: Resolves current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  '/user/{id}':
    get:
      operationId: userQuery
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users:
    get:
      operationId: usersQuery
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users-limit:
    get:
      operationId: usersLimitQuery
      parameters:
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users-sort:
    get:
      operationId: usersSortQuery
      parameters:
        - in: query
          name: sort
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  '/book/{id}':
    get:
      operationId: bookQuery
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /books:
    get:
      operationId: booksQuery
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /never:
    get:
      operationId: neverQuery
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
  /feed:
    get:
      operationId: feedQuery
      parameters:
        - in: query
          name: feedCommentsFilter
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  /add-book:
    post:
      operationId: addBookMutation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
              required:
                - title
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
components:
  schemas:
    Pizza:
      type: object
      required:
        - dough
      properties:
        dough:
          type: string
        toppings:
          type: array
          items:
            type: string
    Salad:
      type: object
      required:
        - ingredients
      properties:
        ingredients:
          type: array
          items:
            type: string
    Book:
      type: object
      required:
        - id
        - title
        - type
      properties:
        id:
          type: string
        title:
          type: string
        type:
          type: string
          enum:
            - AUDIO
            - LEGACY
    User:
      type: object
      required:
        - id
        - name
        - favoritePizza
        - favoriteBook
        - favoriteFood
        - shelf
      properties:
        id:
          type: string
        name:
          type: string
        favoritePizza:
          $ref: '#/components/schemas/Pizza'
        favoriteBook:
          $ref: '#/components/schemas/Book'
        favoriteFood:
          type: object
        shelf:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    Post:
      type: object
      properties:
        comments:
          type: array
          items:
            type: string
    Query:
      type: object
      properties:
        me:
          $ref: '#/components/schemas/User'
          description: Resolves current user
        user:
          $ref: '#/components/schemas/User'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        usersLimit:
          type: array
          items:
            $ref: '#/components/schemas/User'
        usersSort:
          type: array
          items:
            $ref: '#/components/schemas/User'
        book:
          $ref: '#/components/schemas/Book'
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        never:
          type: string
        feed:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    Mutation:
      type: object
      properties:
        addBook:
          $ref: '#/components/schemas/Book'
    Subscription:
      type: object
      properties:
        onBook:
          $ref: '#/components/schemas/Book'
